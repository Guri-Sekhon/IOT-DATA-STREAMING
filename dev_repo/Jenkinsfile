pipeline { 
    agent any
    environment {
        DOCKER_REGISTRY = 'gcr.io/grand-brook-444615-f5'
        IMAGE_NAME = 'iot-data-streaming'
        SLACK_CHANNEL = '#gurislackworkspace'
    }
    stages {
        stage('Checkout') {
            steps {
                git credentialsId: 'github-pat', url: 'https://github.com/Guri-Sekhon/IOT-DATA-STREAMING.git', branch: 'main'

            }
        }
        stage('Google Cloud Authentication') {
            steps {
                // Use the credentials stored in Jenkins for Google Cloud authentication
                withCredentials([[$class: 'GoogleServiceAccountCredentialBinding', 
                                  credentialsId: 'gurisrvacc']]) {
                    sh 'gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS'
                    sh 'gcloud auth configure-docker'
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                script {
                    // Run SonarQube analysis
                    withSonarQubeEnv('SonarQube') {
                        sh 'mvn clean install sonar:sonar'
                    }
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    def buildNumber = "${env.BUILD_NUMBER}-${UUID.randomUUID().toString().take(6)}"
                    env.FULL_IMAGE_NAME = "$DOCKER_REGISTRY/$IMAGE_NAME:$buildNumber"
                    sh "docker build -t $FULL_IMAGE_NAME ."
                }
            }
        }
        stage('Trivy Scan') {
            steps {
                script {
                    // Run Trivy vulnerability scan
                    sh """
                    # Scan the Docker image
                    trivy image $FULL_IMAGE_NAME > trivy-report.txt || true
                    cat trivy-report.txt
                    """
                }
            }
        }
        stage('Push to GCR') {
            steps {
                script {
                    sh "docker push $FULL_IMAGE_NAME"
                }
            }
        }
        stage('Notify Success') {
            steps {
                slackSend(channel: SLACK_CHANNEL, 
                          message: "Build Successful! Image pushed to GCR: $FULL_IMAGE_NAME")
            }
        }
    }
    post {
        failure {
            slackSend(channel: SLACK_CHANNEL, 
                      message: "Build Failed! Check Jenkins logs for details.")
        }
        always {
            // Archive Trivy report and clean up
            archiveArtifacts artifacts: 'trivy-report.txt', allowEmptyArchive: true
            cleanWs() // Clean up workspace after the pipeline
        }
    }
}

